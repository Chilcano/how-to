name: megalinter-ci

on:
  workflow_dispatch:
    inputs:
      logLevel:
        description: 'Log level'
        required: false
        default: 'warning'
        type: choice
        options: [info, warning, debug] 
  # push:
  #   branches: [main, api]
  #   paths:
  #     - 'src/api_specs/**.yaml'
  #     - '.github/workflows/megalinter-ci.yaml'
  # pull_request:
  #   branches: [main, api]
  #   paths:
  #     - 'src/api_specs/**.yaml'
  #     - '.github/workflows/megalinter-ci.yaml'

env:
  APPLY_FIXES: all # When active, APPLY_FIXES must also be defined as environment variable (in github/workflows/mega-linter.yml or other CI tool)
  APPLY_FIXES_EVENT: push # Decide which event triggers application of fixes in a commit or a PR (pull_request, push, all)
  APPLY_FIXES_MODE: commit # If APPLY_FIXES is used, defines if the fixes are directly committed (commit) or posted in a PR (pull_request)

concurrency:
  group: ${{ github.ref }}-${{ github.workflow }}
  cancel-in-progress: true

jobs:
  megalinter:
    name: MegaLinter
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        # with:
        #   token: ${{ secrets.PAT || secrets.GITHUB_TOKEN }}
        #   fetch-depth: 0 # If you use VALIDATE_ALL_CODEBASE = true, you can remove this line to improve performances

      - name: Set myvars
        id: myvars
        run: |
          branchname=$(echo ${GITHUB_REF#refs/heads/} | tr '/' '-' )
          dateinsecs=$(date +%s)
          githashshort=$(git rev-parse --short HEAD)
          echo "GIT_HASH_SHORT=$githashshort" >> $GITHUB_OUTPUT
          echo "DATE_IN_SECS=$dateinsecs" >> $GITHUB_OUTPUT
          if [ "$branchname" = "develop" ]; then
            echo "CURRENT_ENVIRONMENT=development" >> $GITHUB_OUTPUT
            echo "SHORT_ENV_OUT=DEV" >> $GITHUB_OUTPUT
          elif [ "$branchname" = "main" ] || [ "$branchname" = "master" ]; then
            echo "CURRENT_ENVIRONMENT=production" >> $GITHUB_OUTPUT
            echo "SHORT_ENV_OUT=PROD" >> $GITHUB_OUTPUT
          else
            branchname='test'
            echo "CURRENT_ENVIRONMENT=testing" >> $GITHUB_OUTPUT
            echo "SHORT_ENV_OUT=TEST" >> $GITHUB_OUTPUT
          fi
          echo "BRANCH_NAME=$branchname" >> $GITHUB_OUTPUT

      - name: Setup NodeJS
        uses: actions/setup-node@v4
        with:
          node-version: 18
      
      - name: Download API specs example
        run: |
          mkdir -p src/api_specs/
          curl -s https://raw.githubusercontent.com/vocdoni/developer-portal/main/swaggers/vocdoni-api.yaml -o vocdoni-api.yaml 
          mv vocdoni-api.yaml src/api_specs/.
          curl -s https://raw.githubusercontent.com/OAI/OpenAPI-Specification/main/examples/v3.0/petstore.yaml -o src/api_specs/petstore.yaml 

      - name: Download Spectral Rulesets
        run: |
          npm install --save -D @stoplight/spectral-owasp-ruleset
          #echo 'extends: ["https://unpkg.com/@stoplight/spectral-owasp-ruleset@1.2.0/dist/ruleset.js"]' > myspectral.yaml
          #echo 'extends: ["https://unpkg.com/@stoplight/spectral-owasp-ruleset"]' > myspectral.yaml
          echo 'extends: ["spectral:oas", "@stoplight/spectral-owasp-ruleset"]' > myspectral.yaml

      # pull docker image took too much time (~2 mins), can it be cached?:
      # https://stackoverflow.com/questions/71180135/github-actions-how-can-i-cache-the-docker-images-for-testcontainers
      - name: Run
        id: ml
        uses: oxsecurity/megalinter@v7
        env:
          #VALIDATE_ALL_CODEBASE: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' }} # Validates all source when push on main, else just the git diff with main. Override with true if you always want to lint all sources
          VALIDATE_ALL_CODEBASE: true
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          LOG_LEVEL: DEBUG
          ENABLE_LINTERS: OPENAPI_SPECTRAL                # Only OpenAPI Linter (Spectral) will be enabled
          FILTER_REGEX_INCLUDE: (src/api_specs/)          # Only this folder will be considered
          OPENAPI_SPECTRAL_CONFIG_FILE: myspectral.yaml   # This is the Spectral config to be used. It includes the Spectral Rulesets (OWASP, OAS, etc.)
          OPENAPI_SPECTRAL_RULES_PATH: .                  # Spectral Rulesets previously downloaded

      - name: Upload reports as Github Artifacts
        if: ${{ success() }} || ${{ failure() }}
        uses: actions/upload-artifact@v4
        with:
          name: megalinter-reports-ci-${{ steps.myvars.outputs.DATE_IN_SECS }}
          path: |
            megalinter-reports
            mega-linter.log

      - name: Explore workdir
        if: ${{ success() }} || ${{ failure() }}
        run: |
          ls -la src/api_specs/
          ls -la megalinter-reports/
          ls -la
          echo home_path: $(pwd)
          cat myspectral.yaml
          ls -la node_modules/@stoplight/spectral-owasp-ruleset/

      # Create pull request if applicable (for now works only on PR from same repository, not from forks)
      - name: Create GH PR with applied fixes
        id: cpr
        if: |
          steps.ml.outputs.has_updated_sources == 1 && 
          (env.APPLY_FIXES_EVENT == 'all' || env.APPLY_FIXES_EVENT == github.event_name) && 
          env.APPLY_FIXES_MODE == 'pull_request' && 
          (github.event_name == 'push' || github.event.pull_request.head.repo.full_name == github.repository) && 
          !contains(github.event.head_commit.message, 'skip fix')
        uses: peter-evans/create-pull-request@v6
        with:
          token: ${{ secrets.PAT || secrets.GITHUB_TOKEN }}
          commit-message: "[MegaLinter] Apply linters automatic fixes"
          title: "[MegaLinter] Apply linters automatic fixes"
          labels: bot

      - name: Print GH PR output
        if: steps.ml.outputs.has_updated_sources == 1 && 
          (env.APPLY_FIXES_EVENT == 'all' || env.APPLY_FIXES_EVENT == github.event_name) && 
          env.APPLY_FIXES_MODE == 'pull_request' && 
          (github.event_name == 'push' || github.event.pull_request.head.repo.full_name == github.repository) && 
          !contains(github.event.head_commit.message, 'skip fix')
        run: |
          echo "Pull Request Number - ${{ steps.cpr.outputs.pull-request-number }}"
          echo "Pull Request URL - ${{ steps.cpr.outputs.pull-request-url }}"

      # Push new commit if applicable (for now works only on PR from same repository, not from forks)
      - name: Prepare GH commit
        if: |
          steps.ml.outputs.has_updated_sources == 1 && 
          (env.APPLY_FIXES_EVENT == 'all' || env.APPLY_FIXES_EVENT == github.event_name) && 
          env.APPLY_FIXES_MODE == 'commit' && 
          github.ref != 'refs/heads/main' && 
          (github.event_name == 'push' || github.event.pull_request.head.repo.full_name == github.repository) && 
          !contains(github.event.head_commit.message, 'skip fix')
        run: sudo chown -Rc $UID .git/

      - name: Commit and push applied linter fixes
        if: |
          steps.ml.outputs.has_updated_sources == 1 && 
          (env.APPLY_FIXES_EVENT == 'all' || env.APPLY_FIXES_EVENT == github.event_name) && 
          env.APPLY_FIXES_MODE == 'commit' && 
          github.ref != 'refs/heads/main' && 
          (github.event_name == 'push' || github.event.pull_request.head.repo.full_name == github.repository) && 
          !contains(github.event.head_commit.message, 'skip fix')
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          branch: ${{ github.event.pull_request.head.ref || github.head_ref || github.ref }}
          commit_message: "[MegaLinter] Apply linters fixes"
          commit_user_name: megalinter-bot
          commit_user_email: megalinter-bot@holisticsecurity.io